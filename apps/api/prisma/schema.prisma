generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================
// SAMPLE (dummy / legacy)
// =====================
model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("samples")
}

// =====================
// USER
// =====================
model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  username  String     @unique
  password  String?
  googleId  String?    @unique
  role      Role       @default(buyer)
  Products  Product[]  @relation("SellerProducts")
  Wishlist  Wishlist[]
  Cart      Cart[]
  Orders    Order[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())

  @@index([email])
  @@index([username])
  @@map("users")
}

// =====================
// CATEGORY
// =====================
model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  Product   Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())

  @@map("categories")
}

// =====================
// PRODUCT
// =====================
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(12, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  // Relasi ke seller
  seller   User   @relation("SellerProducts", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId String

  // Relasi ke kategori
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  // Relasi lain
  Images     ProductImage[]
  Variants   ProductVariant[]
  Wishlist   Wishlist[]
  Cart       Cart[]
  OrderItems OrderItem[]

  @@index([sellerId])
  @@index([categoryId])
  @@map("products")
}

// =====================
// PRODUCT IMAGE
// =====================
model ProductImage {
  id        String   @id @default(cuid())
  data      Bytes
  isPrimary Boolean  @default(false)
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([productId])
  @@map("product_images")
}

// =====================
// PRODUCT VARIANT
// =====================
model ProductVariant {
  id        String      @id @default(cuid())
  variant   String
  stock     Int         @default(0)
  Product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  Wishlist  Wishlist[]
  Cart      Cart[]
  OrderItem OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())

  @@unique([productId, variant])
  @@index([productId])
  @@map("product_variants")
}

// =====================
// WISHLIST
// =====================
model Wishlist {
  id        String          @id @default(cuid())
  Product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  Variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String?
  User      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())

  @@unique([userId, productId, variantId])
  @@index([userId])
  @@index([productId])
  @@index([variantId])
  @@map("wishlists")
}

// =====================
// CART
// =====================
model Cart {
  id        String          @id @default(cuid())
  quantity  Int             @default(1)
  Product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  Variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String?
  User      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())

  @@unique([userId, productId, variantId])
  @@index([userId])
  @@index([productId])
  @@index([variantId])
  @@map("carts")
}

// =====================
// ORDER
// =====================
model Order {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @db.Decimal(12, 2)
  OrderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())

  @@index([userId])
  @@map("orders")
}

// =====================
// ORDER ITEM
// =====================
model OrderItem {
  id        String          @id @default(cuid())
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  Product   Product?        @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId String?
  Variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  variantId String?
  quantity  Int             @default(1)
  price     Decimal         @db.Decimal(12, 2) // snapshot harga saat order
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
  @@map("order_items")
}

// =====================
// ENUMS
// =====================
enum Role {
  buyer
  seller
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}
